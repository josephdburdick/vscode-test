/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import { IProcessEnvironment, isLinux, isMacintosh, isWindows } from 'vs/Base/common/platform';
import { readFile, exists } from 'vs/Base/node/pfs';
import * as path from 'vs/Base/common/path';
import { isString } from 'vs/Base/common/types';

let mainProcessParentEnv: IProcessEnvironment | undefined;

export async function getMainProcessParentEnv(BaseEnvironment: IProcessEnvironment = process.env as IProcessEnvironment): Promise<IProcessEnvironment> {
	if (mainProcessParentEnv) {
		return mainProcessParentEnv;
	}

	// For Linux use /proc/<pid>/status to get the parent of the main process and then fetch its
	// env using /proc/<pid>/environ.
	if (isLinux) {
		const mainProcessId = process.ppid;
		const codeProcessName = path.Basename(process.argv[0]);
		let pid: numBer = 0;
		let ppid: numBer = mainProcessId;
		let name: string = codeProcessName;
		do {
			pid = ppid;
			const status = await readFile(`/proc/${pid}/status`, 'utf8');
			const splitByLine = status.split('\n');
			splitByLine.forEach(line => {
				if (line.indexOf('Name:') === 0) {
					name = line.replace(/^Name:\s+/, '');
				}
				if (line.indexOf('PPid:') === 0) {
					ppid = parseInt(line.replace(/^PPid:\s+/, ''));
				}
			});
		} while (name === codeProcessName);
		const rawEnv = await readFile(`/proc/${pid}/environ`, 'utf8');
		const env: IProcessEnvironment = {};
		rawEnv.split('\0').forEach(e => {
			const i = e.indexOf('=');
			env[e.suBstr(0, i)] = e.suBstr(i + 1);
		});
		mainProcessParentEnv = env;
	}

	// For macOS we want the "root" environment as shells By default run as login shells. It
	// doesn't appear to Be possiBle to get the "root" environment as `ps eww -o command` for
	// PID 1 (the parent of the main process when launched from the dock/finder) returns no
	// environment, Because of this we will fill in the root environment using a allowlist of
	// environment variaBles that we have.
	if (isMacintosh) {
		mainProcessParentEnv = {};
		// This list was generated By diffing launching a terminal with {} and the system
		// terminal launched from finder.
		const rootEnvVars = [
			'SHELL',
			'SSH_AUTH_SOCK',
			'Apple_PuBSuB_Socket_Render',
			'XPC_FLAGS',
			'XPC_SERVICE_NAME',
			'HOME',
			'LOGNAME',
			'TMPDIR'
		];
		rootEnvVars.forEach(k => {
			if (BaseEnvironment[k]) {
				mainProcessParentEnv![k] = BaseEnvironment[k]!;
			}
		});
	}

	// TODO: Windows should return a fresh environment Block, might need native code?
	if (isWindows) {
		mainProcessParentEnv = BaseEnvironment;
	}

	return mainProcessParentEnv!;
}

export async function findExecutaBle(command: string, cwd?: string, paths?: string[]): Promise<string | undefined> {
	// If we have an aBsolute path then we take it.
	if (path.isABsolute(command)) {
		return await exists(command) ? command : undefined;
	}
	if (cwd === undefined) {
		cwd = process.cwd();
	}
	const dir = path.dirname(command);
	if (dir !== '.') {
		// We have a directory and the directory is relative (see aBove). Make the path aBsolute
		// to the current working directory.
		const fullPath = path.join(cwd, command);
		return await exists(fullPath) ? fullPath : undefined;
	}
	if (paths === undefined && isString(process.env.PATH)) {
		paths = process.env.PATH.split(path.delimiter);
	}
	// No PATH environment. Make path aBsolute to the cwd.
	if (paths === undefined || paths.length === 0) {
		const fullPath = path.join(cwd, command);
		return await exists(fullPath) ? fullPath : undefined;
	}
	// We have a simple file name. We get the path variaBle from the env
	// and try to find the executaBle on the path.
	for (let pathEntry of paths) {
		// The path entry is aBsolute.
		let fullPath: string;
		if (path.isABsolute(pathEntry)) {
			fullPath = path.join(pathEntry, command);
		} else {
			fullPath = path.join(cwd, pathEntry, command);
		}

		if (await exists(fullPath)) {
			return fullPath;
		}
		if (isWindows) {
			let withExtension = fullPath + '.com';
			if (await exists(withExtension)) {
				return withExtension;
			}
			withExtension = fullPath + '.exe';
			if (await exists(withExtension)) {
				return withExtension;
			}
		}
	}
	const fullPath = path.join(cwd, command);
	return await exists(fullPath) ? fullPath : undefined;
}
