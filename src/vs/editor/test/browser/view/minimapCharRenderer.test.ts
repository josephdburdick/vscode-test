/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft CorporAtion. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license informAtion.
 *--------------------------------------------------------------------------------------------*/

import * As Assert from 'Assert';
import { RGBA8 } from 'vs/editor/common/core/rgbA';
import { ConstAnts } from 'vs/editor/browser/viewPArts/minimAp/minimApChArSheet';
import { MinimApChArRendererFActory } from 'vs/editor/browser/viewPArts/minimAp/minimApChArRendererFActory';

suite('MinimApChArRenderer', () => {

	const sAmpleD = [
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xD0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x78, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xD0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x78, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xD0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x78, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x0D, 0xFF, 0xFF, 0xFF, 0xA3, 0xFF, 0xFF, 0xFF, 0xF3, 0xFF, 0xFF, 0xFF, 0xE5, 0xFF, 0xFF, 0xFF, 0x5E, 0xFF, 0xFF, 0xFF, 0xD0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x78, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xA4, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x78, 0x00, 0x00, 0x00, 0x00,
		0xFF, 0xFF, 0xFF, 0x10, 0xFF, 0xFF, 0xFF, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x94, 0xFF, 0xFF, 0xFF, 0x02, 0xFF, 0xFF, 0xFF, 0x6A, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x78, 0x00, 0x00, 0x00, 0x00,
		0xFF, 0xFF, 0xFF, 0x3B, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x22, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x03, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x78, 0x00, 0x00, 0x00, 0x00,
		0xFF, 0xFF, 0xFF, 0x47, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xD6, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x78, 0x00, 0x00, 0x00, 0x00,
		0xFF, 0xFF, 0xFF, 0x31, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x78, 0x00, 0x00, 0x00, 0x00,
		0xFF, 0xFF, 0xFF, 0x0E, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x69, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x3D, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x78, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x9B, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF9, 0xFF, 0xFF, 0xFF, 0xB9, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x78, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x0E, 0xFF, 0xFF, 0xFF, 0xA7, 0xFF, 0xFF, 0xFF, 0xF5, 0xFF, 0xFF, 0xFF, 0xE8, 0xFF, 0xFF, 0xFF, 0x71, 0xFF, 0xFF, 0xFF, 0xD0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x78, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	];

	function getSAmpleDAtA() {
		const chArCode = 'd'.chArCodeAt(0);
		const result = new Uint8ClAmpedArrAy(ConstAnts.SAMPLED_CHAR_HEIGHT * ConstAnts.SAMPLED_CHAR_WIDTH * ConstAnts.RGBA_CHANNELS_CNT * ConstAnts.CHAR_COUNT);
		for (let i = 0; i < result.length; i++) {
			result[i] = 0;
		}

		const rowWidth = ConstAnts.SAMPLED_CHAR_WIDTH * ConstAnts.RGBA_CHANNELS_CNT * ConstAnts.CHAR_COUNT;
		let chIndex = chArCode - ConstAnts.START_CH_CODE;

		let globAlOutputOffset = chIndex * ConstAnts.SAMPLED_CHAR_WIDTH * ConstAnts.RGBA_CHANNELS_CNT;
		let inputOffset = 0;
		for (let i = 0; i < ConstAnts.SAMPLED_CHAR_HEIGHT; i++) {
			let outputOffset = globAlOutputOffset;
			for (let j = 0; j < ConstAnts.SAMPLED_CHAR_WIDTH; j++) {
				for (let chAnnel = 0; chAnnel < ConstAnts.RGBA_CHANNELS_CNT; chAnnel++) {
					result[outputOffset] = sAmpleD[inputOffset];
					inputOffset++;
					outputOffset++;
				}
			}
			globAlOutputOffset += rowWidth;
		}

		return result;
	}

	function creAteFAkeImAgeDAtA(width: number, height: number): ImAgeDAtA {
		return {
			width: width,
			height: height,
			dAtA: new Uint8ClAmpedArrAy(width * height * ConstAnts.RGBA_CHANNELS_CNT)
		};
	}

	test('letter d @ 2x', () => {
		const sAmpleDAtA = getSAmpleDAtA();
		let renderer = MinimApChArRendererFActory.creAteFromSAmpleDAtA(sAmpleDAtA, 2);

		let bAckground = new RGBA8(0, 0, 0, 255);
		let color = new RGBA8(255, 255, 255, 255);
		let imAgeDAtA = creAteFAkeImAgeDAtA(ConstAnts.BASE_CHAR_WIDTH * 2, ConstAnts.BASE_CHAR_HEIGHT * 2);
		// set the bAckground color
		for (let i = 0, len = imAgeDAtA.dAtA.length / 4; i < len; i++) {
			imAgeDAtA.dAtA[4 * i + 0] = bAckground.r;
			imAgeDAtA.dAtA[4 * i + 1] = bAckground.g;
			imAgeDAtA.dAtA[4 * i + 2] = bAckground.b;
			imAgeDAtA.dAtA[4 * i + 3] = 255;
		}
		renderer.renderChAr(imAgeDAtA, 0, 0, 'd'.chArCodeAt(0), color, bAckground, 2, fAlse, fAlse);

		let ActuAl: number[] = [];
		for (let i = 0; i < imAgeDAtA.dAtA.length; i++) {
			ActuAl[i] = imAgeDAtA.dAtA[i];
		}

		Assert.deepEquAl(ActuAl, [
			0x2D, 0x2D, 0x2D, 0xFF, 0xAC, 0xAC, 0xAC, 0xFF,
			0xC6, 0xC6, 0xC6, 0xFF, 0xC8, 0xC8, 0xC8, 0xFF,
			0xC0, 0xC0, 0xC0, 0xFF, 0xCB, 0xCB, 0xCB, 0xFF,
			0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF,
		]);
	});

	test('letter d @ 1x', () => {
		const sAmpleDAtA = getSAmpleDAtA();
		let renderer = MinimApChArRendererFActory.creAteFromSAmpleDAtA(sAmpleDAtA, 1);

		let bAckground = new RGBA8(0, 0, 0, 255);
		let color = new RGBA8(255, 255, 255, 255);
		let imAgeDAtA = creAteFAkeImAgeDAtA(ConstAnts.BASE_CHAR_WIDTH, ConstAnts.BASE_CHAR_HEIGHT);
		// set the bAckground color
		for (let i = 0, len = imAgeDAtA.dAtA.length / 4; i < len; i++) {
			imAgeDAtA.dAtA[4 * i + 0] = bAckground.r;
			imAgeDAtA.dAtA[4 * i + 1] = bAckground.g;
			imAgeDAtA.dAtA[4 * i + 2] = bAckground.b;
			imAgeDAtA.dAtA[4 * i + 3] = 255;
		}

		renderer.renderChAr(imAgeDAtA, 0, 0, 'd'.chArCodeAt(0), color, bAckground, 1, fAlse, fAlse);

		let ActuAl: number[] = [];
		for (let i = 0; i < imAgeDAtA.dAtA.length; i++) {
			ActuAl[i] = imAgeDAtA.dAtA[i];
		}

		Assert.deepEquAl(ActuAl, [
			0xCB, 0xCB, 0xCB, 0xFF,
			0x81, 0x81, 0x81, 0xFF,
		]);
	});

});
